use('findMyRestaurant');


// 1.1
// db.restaurants.find();

// 1.2
// db.restaurants.find({"cuisine": "South"});

// 1.3
// db.restaurants.find({"kosher": true});

// 1.4
// db.restaurants.find({"address.city": "Ashdod"});

// 1.5
// db.restaurants.find({"address.city": "Berlin", "address.street": "Two"});

// 1.6
// db.restaurants.find({"address.coordinates": [-77, 564, 40.677]});

// 1.7
// db.restaurants.find().sort({"name": 1});

// 1.8
// db.restaurants.find().sort({"address.city": 1});

// 1.9
// db.restaurants.updateOne({"_id": 2}, {$set: {"name": "f"}})

// 1.10
// db.restaurants.updateOne({"_id": 4}, {$push: {"reviews": "PHP"}})

// 1.11
// db.restaurants.updateMany({"kosher": false}, {$set: {"kosher": true}})

//  1.12
// db.restaurants.deleteOne({"_id": 5})

//  1.13
// db.restaurants.deleteMany({})


// 2.1
// db.restaurants.find().forEach(function(doc) {
// 	print(doc.name);
// });

// 2.2
// db.restaurants.find().forEach((doc) => {
// 	print(doc.address.city);
// });

// // 2.3
// db.restaurants.find().forEach((doc) => {
// 	print(doc.address.coordinates);
// });


// 3.1
// db.restaurants.find({"name": /^a/})
// db.restaurants.find({"name": /^s/})

// 3.2



// // Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// // Run the aggregation and open a cursor to the results.
// // Use toArray() to exhaust the cursor to return the whole result set.
// // You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
